//--------------------------------------//               PowerUI////        For documentation or //    if you have any issues, visit//        powerUI.kulestar.com////    Copyright © 2013 Kulestar Ltd//          www.kulestar.com//--------------------------------------namespace Css.Properties{		/// <summary>	/// Represents the writing-mode: css property.	/// </summary>		public class WritingMode:CssProperty{				public static WritingMode GlobalProperty;				public WritingMode(){			GlobalProperty=this;			Inherits=true;			InitialValueText="horizontal-tb";		}				public override string[] GetProperties(){			return new string[]{"writing-mode"};		}				public override ApplyState Apply(ComputedStyle style,Value value){						// Assume HorizontalTB if blank:			int mode=Css.WritingMode.HorizontalTB;									if(value!=null){								switch(value.Text){					case "tb": // SVG					case "tb-rl": // SVG					case "vertical-rl":						mode=Css.WritingMode.VerticalRL;					break;					case "vertical-lr":						mode=Css.WritingMode.VerticalLR;					break;					case "sideways-rl":						mode=Css.WritingMode.SidewaysRL;					break;					case "sideways-lr":						mode=Css.WritingMode.SidewaysLR;					break;					default:					// case "horizontal-tb":						mode=Css.WritingMode.HorizontalTB;					break;				}							}						if(mode==Css.WritingMode.HorizontalTB){								// Delete:				style.Properties.Remove(GlobalProperty);							}else{								// Write the mode value to the style:				style[GlobalProperty]=new Css.Units.CachedIntegerUnit(value,mode);							}						// If we've got a writing system property, reset it:			SparkWritingSystem.GlobalProperty.UpdateMap(style);						style.RequestLayout();						// Ok!			return ApplyState.ReloadValue;					}			}	}